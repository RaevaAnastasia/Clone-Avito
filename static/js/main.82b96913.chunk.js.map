{"version":3,"sources":["PropertyItem/PropertyItem.js","PropertyList/PropertyList.js","PropertyDetail/PropertyDetail.js","App.js","serviceWorker.js","index.js"],"names":["PropertyItem","props","className","to","id","target","title","address","price","src","previewImage","alt","PropertyList","useState","list","setList","axios","get","then","responce","data","catch","error","alert","propertyList","map","elem","i","key","PropertyDetails","useParams","result","setResult","imgs","images","imgList","headImg","document","querySelector","thumb","href","onmouseover","event","thumbnail","closest","focus","preventDefault","onclick","description","sellerName","App","path","PropertyDetail","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82b96913.chunk.js","sourcesContent":["import React from 'react';\nimport './PropertyItem.css';\nimport {BrowserRouter as Router, Link} from 'react-router-dom';\n\nfunction PropertyItem(props) {\n\n    return (<div className=\"property\">\n            <div className=\"property__wrap\">\n                <h3>\n                    <Router>\n                        <Link className=\"property__title\" to={'/' + props.id} target=\"_blank\" id={props.id}>{props.title}</Link>\n                    </Router>      \n                </h3> \n                <p className=\"property__address\">{props.address}</p>\n                <span className=\"property__price\">{props.price}</span>\n            </div>\n            <div className=\"property__img-wrap\">\n                <img className=\"property__img\" src={props.previewImage} alt={props.title}></img>\n            </div>\n        </div>\n    );\n}\n\nexport default PropertyItem;","import React, { useState } from 'react';\nimport PropertyItem from '../PropertyItem/PropertyItem.js';\nimport axios from 'axios';\nimport './PropertyList.css';\n\nfunction PropertyList() {\n    let [list, setList] = useState([]);\n\n    axios.get('http://134.209.138.34/items')\n        .then(responce => {\n            setList(responce.data);\n        })\n        .catch(error => {\n            alert(\"Ошибка\");\n    })     \n\n    let propertyList = list.map((elem, i) => {\n            return <li className=\"property-item\" key={i}>\n                <PropertyItem title={elem.title} address = {elem.address} price = {elem.price} previewImage = {elem.previewImage} id={elem.id}/>\n            </li>\n        })\n\n        \n    return (<ul className=\"property-list\">\n        {propertyList}\n    </ul>);\n}\n\nexport default PropertyList;","import React, { useState } from 'react';\nimport axios from 'axios';\nimport {useParams} from \"react-router-dom\";\nimport './PropertyDetails.css';\n\nfunction PropertyDetails() {\n    let {id} = useParams();\n    let [result, setResult] = useState([]);\n    let imgs = result.images;\n    let imgList = [];\n    let headImg = document.querySelector('.detail__img');\n    let thumb = document.querySelector('.detail__img-wrap');\n\n    axios.get('http://134.209.138.34/item/' + id)\n        .then(responce => { \n            setResult(responce.data[0]);\n        })\n        .catch((error => {\n            alert('Error' + error);\n        }\n        ))\n    \n    if (imgs) {\n        imgList =  imgs.map((elem, i) => {\n            return <li className=\"detail__img-item\" key={i}>\n                    <a className=\"detail__img-link\" href={elem}>\n                        <img className=\"detail__img\" src={elem} alt={result.title}></img>\n                    </a>\n                </li>\n        })\n    }\n    \n    if (thumb) {\n        thumb.onmouseover = function(event) {\n            let thumbnail = event.target.closest('a');\n    \n            if (!thumbnail) return;\n            showThumbnail(thumbnail.href, thumbnail.alt);\n            thumbnail.focus();\n            event.preventDefault();\n        }\n\n        thumb.onclick = function(event) {\n            event.preventDefault();\n        }\n    \n        function showThumbnail(href, alt) {\n            headImg.src = href;\n            headImg.alt = alt;\n        }\n    }\n\n    return (<section className=\"detail container\">\n            <div className=\"detail__left-side\">\n                <h1 className=\"detail__title\">{result.title}</h1>\n                <ul className=\"detail__img-wrap\">\n                    {imgList[0]}\n                    {imgList}\n                </ul>\n            </div>\n            <div className=\"detail__right-side\">\n                <p className=\"detail__desc\">\n                    <span className=\"detail__subtitle\">Описание: </span> \n                    {result.description}</p>\n                <p className=\"detail__address\">\n                    <span className=\"detail__subtitle\">Адрес: </span>\n                    {result.address}\n                </p>\n                <p className=\"detail__seller\">\n                    <span className=\"detail__subtitle\">Владелец: </span>\n                    {result.sellerName}\n                </p>\n                <p className=\"detail__price\">\n                    <span className=\"detail__subtitle\">Цена: </span>\n                    {result.price}\n                </p>\n            </div> \n        </section>\n    );\n}\n\nexport default PropertyDetails;","import React from 'react';\nimport './App.css';\nimport {Switch,Route} from \"react-router-dom\";\nimport PropertyList from './PropertyList/PropertyList';\nimport PropertyDetails from './PropertyDetail/PropertyDetail';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path='/:id'>\n        <PropertyDetails />\n      </Route>\n      <Route path='/'>\n        <div className=\"main container\">\n          <h2 className=\"main__title\">Доска объявлений</h2>\n          <PropertyList />\n        </div> \n      </Route>\n    </Switch>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}